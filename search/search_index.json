{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Syngle Documentation : https://valentincalomme.github.io/syngle/ Source Code : https://github.com/ValentinCalomme/syngle/ Table of Contents About Installation Usage About Simple package implementing the Singleton pattern as a metaclass. Installation Simply pip install the package! pip install syngle The package only has Python as a dependency to remain. It was developed for Python 3.8+ and has not been tested for prior versions. Usage In order to make a class implement the singleton pattern, you can either use a metaclass or a decorator. Functionally, both will work the same way. As a metaclass Simply import the Singleton class and make your classess extend it. from syngle import Singleton class MyClass ( metaclass = Singleton ): pass myclass1 = MyClass () myclass2 = MyClass () assert myclass1 is myclass2 As a decorator from syngle import singleton @singleton class MyClass : pass myclass1 = MyClass () myclass2 = MyClass () assert myclass1 is myclass2","title":"Home"},{"location":"#syngle","text":"Documentation : https://valentincalomme.github.io/syngle/ Source Code : https://github.com/ValentinCalomme/syngle/","title":"Syngle"},{"location":"#table-of-contents","text":"About Installation Usage","title":"Table of Contents"},{"location":"#about","text":"Simple package implementing the Singleton pattern as a metaclass.","title":"About"},{"location":"#installation","text":"Simply pip install the package! pip install syngle The package only has Python as a dependency to remain. It was developed for Python 3.8+ and has not been tested for prior versions.","title":"Installation"},{"location":"#usage","text":"In order to make a class implement the singleton pattern, you can either use a metaclass or a decorator. Functionally, both will work the same way.","title":"Usage"},{"location":"#as-a-metaclass","text":"Simply import the Singleton class and make your classess extend it. from syngle import Singleton class MyClass ( metaclass = Singleton ): pass myclass1 = MyClass () myclass2 = MyClass () assert myclass1 is myclass2","title":"As a metaclass"},{"location":"#as-a-decorator","text":"from syngle import singleton @singleton class MyClass : pass myclass1 = MyClass () myclass2 = MyClass () assert myclass1 is myclass2","title":"As a decorator"}]}